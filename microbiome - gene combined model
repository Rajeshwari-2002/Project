# Load libraries
library(survival)
library(glmnet)
library(survminer)
library(caret)
library(dplyr)

# --- 1. Load and Clean Data ---
micro_df <- read.csv("/home/hp/Desktop/RAJESWARI/survival/complete_microbiome_clr transformed_table.csv", stringsAsFactors = FALSE)
gene_df <- read.csv("gene expression with gene map.csv", stringsAsFactors = FALSE)
clinical_df <- read.csv("edited_by deletion_metadata.csv", stringsAsFactors = FALSE)

micro_df <- micro_df[!duplicated(micro_df$tcga_barcode), ]
gene_df <- gene_df[!duplicated(gene_df$tcga_barcode), ]
clinical_df <- clinical_df[!duplicated(clinical_df$tcga_barcode), ]

rownames(micro_df) <- micro_df$tcga_barcode
rownames(gene_df) <- gene_df$tcga_barcode
rownames(clinical_df) <- clinical_df$tcga_barcode

micro_df$tcga_barcode <- NULL
gene_df$tcga_barcode <- NULL
clinical_df$tcga_barcode <- NULL

if("Overall.Survival..Months." %in% colnames(clinical_df)){
  colnames(clinical_df)[colnames(clinical_df) == "Overall.Survival..Months."] <- "OS"
} else {
  stop("Column Overall.Survival..Months. not found in clinical data")
}

common_ids <- Reduce(intersect, list(rownames(micro_df), rownames(gene_df), rownames(clinical_df)))
micro_df <- micro_df[common_ids, , drop=FALSE]
gene_df <- gene_df[common_ids, , drop=FALSE]
clinical_df <- clinical_df[common_ids, , drop=FALSE]

merged_df <- cbind(clinical_df[, c("OS", "event_status", "age", "Stage")], micro_df, gene_df)
merged_df$Stage <- as.factor(as.character(merged_df$Stage))

# --- 2. Feature Preprocessing ---
feature_df <- merged_df[, !(colnames(merged_df) %in% c("OS", "event_status", "age", "Stage"))]
feature_df <- feature_df[, apply(feature_df, 2, function(x) length(unique(na.omit(x))) > 1)]
feature_df <- feature_df[, colMeans(is.na(feature_df)) < 0.2]

impute_median <- function(x) replace(x, is.na(x), median(x, na.rm=TRUE))
feature_df <- as.data.frame(lapply(feature_df, impute_median))
feature_df <- as.data.frame(scale(feature_df))

merged_df$age <- scale(merged_df$age)
model_df <- cbind(merged_df[, c("OS", "event_status", "Stage")], age = merged_df$age, feature_df)

dummies <- model.matrix(~ Stage - 1, data = model_df)
dummies <- dummies[, -1, drop=FALSE]
model_df <- cbind(model_df[, !colnames(model_df) %in% "Stage"], dummies)

# --- 3. Train/Test Split ---
set.seed(42)
train_idx <- createDataPartition(model_df$event_status, p=0.7, list=FALSE)
train_df <- model_df[train_idx, ]
test_df <- model_df[-train_idx, ]
train_df <- train_df[train_df$OS > 0, ]

x_train <- as.matrix(train_df[, !(colnames(train_df) %in% c("OS", "event_status"))])
y_train <- Surv(train_df$OS, train_df$event_status)

x_test <- as.matrix(test_df[, !(colnames(test_df) %in% c("OS", "event_status"))])
y_test <- Surv(test_df$OS, test_df$event_status)

# --- 4. Feature Selection using Elastic Net (Less Aggressive) ---
cvfit <- cv.glmnet(x_train, y_train, family = "cox", alpha = 0.5, nfolds = 5)
best_lambda <- cvfit$lambda.min  # Less strict, more features
enet_fit <- glmnet(x_train, y_train, family = "cox", alpha = 0.5, lambda = best_lambda)
coef_enet <- coef(enet_fit)
selected_features <- rownames(coef_enet)[as.numeric(coef_enet) != 0]
cat("Number of features selected by Elastic Net:", length(selected_features), "\n")

print(selected_features)


####### if the above cvfit condition not work
# Fit Elastic Net with cross-validation
cvfit <- cv.glmnet(x_train, y_train, family = "cox", alpha = 0.5, nfolds = 5)

# Try lambda.1se first
best_lambda <- cvfit$lambda.1se
enet_fit <- glmnet(x_train, y_train, family = "cox", alpha = 0.5, lambda = best_lambda)
coef_enet <- coef(enet_fit)
selected_features <- rownames(coef_enet)[as.numeric(coef_enet) != 0]

# If lambda.1se gives 0 features, fallback to lambda.min
if (length(selected_features) == 0) {
  cat("lambda.1se gave 0 features, using lambda.min instead.\n")
  best_lambda <- cvfit$lambda.min
  enet_fit <- glmnet(x_train, y_train, family = "cox", alpha = 0.5, lambda = best_lambda)
  coef_enet <- coef(enet_fit)
  selected_features <- rownames(coef_enet)[as.numeric(coef_enet) != 0]
}

cat("Number of features selected by Elastic Net:", length(selected_features), "\n")
print(selected_features)
###########

# --- 5. Fit Cox Model ---
cox_formula <- as.formula(paste("Surv(OS, event_status) ~", paste(selected_features, collapse = "+")))
cox_fit <- coxph(cox_formula, data = train_df)

# --- 6. Check PH assumption ---
ph_test <- cox.zph(cox_fit)
print(ph_test)
plot(ph_test)

# --- 7. Model Evaluation (Test Data) ---
test_pred <- predict(cox_fit, newdata = test_df, type = "risk")

c_index <- survConcordance(Surv(test_df$OS, test_df$event_status) ~ test_pred)$concordance
cat(sprintf("Test Concordance Index: %.3f\n", c_index))

#to save the risk score
# Recreate a column with barcodes from rownames
risk_scores_df <- data.frame(
  tcga_barcode = rownames(test_df),
  predicted_risk = test_pred
)

# Save to CSV
write.csv(risk_scores_df, "predicted_risk_scores_test.csv", row.names = FALSE)
train_risk <- predict(cox_fit, newdata = train_df, type = "risk")
train_scores_df <- data.frame(
  tcga_barcode = rownames(train_df),
  predicted_risk = train_risk,
  set = "train"
)

test_scores_df <- data.frame(
  tcga_barcode = rownames(test_df),
  predicted_risk = test_pred,
  set = "test"
)

# Combine and save
combined_risk <- rbind(train_scores_df, test_scores_df)
write.csv(combined_risk, "predicted_risk_scores_combined.csv", row.names = FALSE)
combined_risk_clinical <- merge(combined_risk, clinical_df, by = "tcga_barcode")
write.csv(combined_risk_clinical, "risk_scores_with_clinical.csv", row.names = FALSE)

# --- 8. Kaplan-Meier curves by risk group ---
median_risk <- median(test_pred)
test_df$risk_group <- ifelse(test_pred > median_risk, "High Risk", "Low Risk")
fit_km <- survfit(Surv(OS, event_status) ~ risk_group, data = test_df)
ggsurvplot(fit_km, data = test_df, pval = TRUE, risk.table = TRUE, title = "KM Survival Curves by Risk Group")

# KM by Stage
clinical_stage_df <- clinical_df[common_ids, ]
clinical_stage_df$Stage <- as.factor(as.character(clinical_stage_df$Stage))

fit_km_stage <- survfit(Surv(OS, event_status) ~ Stage, data = clinical_stage_df)
ggsurvplot(fit_km_stage, data = clinical_stage_df, pval = TRUE, risk.table = TRUE,
           title = "KM Survival Curves by Stage")


#Time-dependent ROC Curve for Train & Test
# --- Train ROC ---
# Use months: 12 months = 1 year, 24 = 2 years, 36 = 3 years
library(timeROC)

# --- Risk Prediction ---
train_risk <- predict(cox_fit, newdata = train_df, type = "risk")
test_risk <- predict(cox_fit, newdata = test_df, type = "risk")

# --- Train ROC ---
roc_train <- timeROC(
  T = train_df$OS,
  delta = train_df$event_status,
  marker = train_risk,
  cause = 1,
  times = c(12, 24, 36),
  iid = TRUE
)

# --- Test ROC ---
roc_test <- timeROC(
  T = test_df$OS,
  delta = test_df$event_status,
  marker = test_risk,
  cause = 1,
  times = c(12, 24, 36),
  iid = TRUE
)

# --- Plot ROC ---
plot(roc_train, time = 12, col = "blue", title = "12-Month Time-dependent ROC")
plot(roc_test, time = 12, add = TRUE, col = "red")
legend("bottomright", legend = c("Train", "Test"), col = c("blue", "red"), lty = 1)
text(0.6, 0.2, paste0("Train AUC = ", round(roc_train$AUC[1], 3)), col = "blue", cex = 0.9)
text(0.6, 0.15, paste0("Test AUC = ", round(roc_test$AUC[1], 3)), col = "red", cex = 0.9)



# --- 9. Kaplan-Meier curves by Stage wise (Full Dataset) ---
clinical_stage_df <- clinical_df[common_ids, ]
clinical_stage_df$Stage <- as.factor(as.character(clinical_stage_df$Stage))
fit_km_stage <- survfit(Surv(OS, event_status) ~ Stage, data = clinical_stage_df)
ggsurvplot(fit_km_stage, data = clinical_stage_df, pval = TRUE, risk.table = TRUE, title = "KM Survival Curves by Stage")
